'use client'

import { useState, useEffect, useRef, useLayoutEffect } from 'react'

// Theme colors will use CSS variables

const fontSize = '16px'
const lineHeight = '1.6'

export default function Home() {
  const [currentInput, setCurrentInput] = useState('')
  const [history, setHistory] = useState<string[]>([])
  const [commandHistory, setCommandHistory] = useState<string[]>([])
  const [historyIndex, setHistoryIndex] = useState(-1)
  const [loginTime, setLoginTime] = useState('Loading...')
  const [cursorPosition, setCursorPosition] = useState(0)
  const [currentTheme, setCurrentTheme] = useState('dark')
  const [showMatrix, setShowMatrix] = useState(false)
  const inputRef = useRef<HTMLInputElement>(null)
  const terminalRef = useRef<HTMLDivElement>(null)

  // Use CSS variables for theming
  const getThemeColor = (color: string) => {
    if (typeof window === 'undefined') return ''
    const styles = getComputedStyle(document.documentElement)
    return styles.getPropertyValue(`--${color}`).trim()
  }

  useEffect(() => {
    // Update time every second
    const updateTime = () => {
      const now = new Date()
      const options: Intl.DateTimeFormatOptions = {
        weekday: 'short',
        day: 'numeric',
        month: 'short',
        year: 'numeric',
        hour: '2-digit',
        minute: '2-digit',
        second: '2-digit',
        timeZone: 'Europe/London',
        timeZoneName: 'short'
      }
      setLoginTime(now.toLocaleString('en-GB', options))
    }
    
    updateTime() // Set initial time
    const timeInterval = setInterval(updateTime, 1000) // Update every second
    
    // Auto focus on mount
    const focusTimer = setInterval(() => {
      if (inputRef.current) {
        inputRef.current.focus()
        clearInterval(focusTimer)
      }
    }, 100)
    
    return () => {
      clearInterval(timeInterval)
      clearInterval(focusTimer)
    }
  }, [])

  // Update cursor position when input changes
  useEffect(() => {
    setCursorPosition(currentInput.length)
  }, [currentInput])

  // Auto-scroll to bottom when history changes
  useLayoutEffect(() => {
    if (terminalRef.current) {
      terminalRef.current.scrollTop = terminalRef.current.scrollHeight
    }
  }, [history])

  const initialOutput = [
    `<span style="color: ${theme.purple}">cjber@dev</span>:<span style="color: ${theme.blue}">~</span>$ <span style="color: ${theme.yellow}">whoami</span>`,
    `<span style="color: ${theme.green}">cjber</span>`,
    '',
    `<span style="color: ${theme.purple}">cjber@dev</span>:<span style="color: ${theme.blue}">~</span>$ <span style="color: ${theme.yellow}">cat</span> about.txt`,
    'Software engineer at thirdweb.',
    '',
    `<span style="color: ${theme.purple}">cjber@dev</span>:<span style="color: ${theme.blue}">~</span>$ <span style="color: ${theme.yellow}">ls</span> <span style="color: ${theme.muted}">-la</span> links/`,
    'total 12',
    `drwxr-xr-x  2 cjber cjber 4096 Jan  1 00:00 <span style="color: ${theme.blue}">.</span>`,
    `drwxr-xr-x 10 cjber cjber 4096 Jan  1 00:00 <span style="color: ${theme.blue}">..</span>`,
    '-rw-r--r--  1 cjber cjber   42 Jan  1 00:00 github.txt',
    '-rw-r--r--  1 cjber cjber   42 Jan  1 00:00 linkedin.txt',
    '-rw-r--r--  1 cjber cjber   42 Jan  1 00:00 email.txt',
    '',
    `<span style="color: ${theme.purple}">cjber@dev</span>:<span style="color: ${theme.blue}">~</span>$ <span style="color: ${theme.yellow}">cat</span> links/*`,
    `<a href="https://github.com/cjber" target="_blank" rel="noopener noreferrer" style="color: ${theme.blue}; text-decoration: underline; cursor: pointer">https://github.com/cjber</a>`,
    `<a href="https://linkedin.com/in/cjberr" target="_blank" rel="noopener noreferrer" style="color: ${theme.blue}; text-decoration: underline; cursor: pointer">https://linkedin.com/in/cjberr</a>`,
    `<a href="mailto:cjberragan@gmail.com" style="color: ${theme.cyan}; text-decoration: none; cursor: pointer">cjberragan@gmail.com</a>`,
    '',
  ]

  // Function to generate calendar
  const generateCalendar = (year?: number, month?: number): string[] => {
    const now = new Date()
    const calYear = year || now.getFullYear()
    const calMonth = month !== undefined ? month : now.getMonth()
    const today = now.getDate()
    const currentMonth = now.getMonth()
    const currentYear = now.getFullYear()
    
    const monthNames = [
      'January', 'February', 'March', 'April', 'May', 'June',
      'July', 'August', 'September', 'October', 'November', 'December'
    ]
    
    const firstDay = new Date(calYear, calMonth, 1).getDay()
    const daysInMonth = new Date(calYear, calMonth + 1, 0).getDate()
    
    const lines: string[] = []
    
    // Header
    lines.push(`<span style="color: ${theme.cyan}">${monthNames[calMonth]} ${calYear}</span>`)
    lines.push(`<span style="color: ${theme.muted}">Su Mo Tu We Th Fr Sa</span>`)
    
    // Days
    let week = '  '.repeat(firstDay)
    for (let day = 1; day <= daysInMonth; day++) {
      const isToday = day === today && calMonth === currentMonth && calYear === currentYear
      const dayStr = day.toString().padStart(2, ' ')
      
      if (isToday) {
        week += `<span style="background-color: ${theme.purple}; color: ${theme.bg}">${dayStr}</span>`
      } else {
        week += dayStr
      }
      
      if ((firstDay + day) % 7 === 0) {
        lines.push(week)
        week = ''
      } else {
        week += ' '
      }
    }
    
    if (week.trim()) {
      lines.push(week)
    }
    
    return lines
  }

  const commands: { [key: string]: string[] } = {
    help: [
      'Available commands:',
      `  <span style="color: ${theme.yellow}">help</span>     - Show this help message`,
      `  <span style="color: ${theme.yellow}">whoami</span>   - Display username`,
      `  <span style="color: ${theme.yellow}">about</span>    - About me`,
      `  <span style="color: ${theme.yellow}">links</span>    - Show contact links`,
      `  <span style="color: ${theme.yellow}">clear</span>    - Clear terminal`,
      `  <span style="color: ${theme.yellow}">cal</span>      - Display calendar`,
      `  <span style="color: ${theme.yellow}">neofetch</span> - System information`,
      `  <span style="color: ${theme.yellow}">pfetch</span>   - System information (minimal)`,
      `  <span style="color: ${theme.yellow}">theme</span>    - Change color theme`,
      `  <span style="color: ${theme.yellow}">matrix</span>   - Enter the Matrix`,
    ],
    whoami: [`<span style="color: ${theme.green}">cjber</span>`],
    about: ['Software engineer at thirdweb.'],
    links: [
      `<a href="https://github.com/cjber" target="_blank" rel="noopener noreferrer" style="color: ${theme.blue}; text-decoration: underline; cursor: pointer">https://github.com/cjber</a>`,
      `<a href="https://linkedin.com/in/cjberr" target="_blank" rel="noopener noreferrer" style="color: ${theme.blue}; text-decoration: underline; cursor: pointer">https://linkedin.com/in/cjberr</a>`,
      `<a href="mailto:cjberragan@gmail.com" style="color: ${theme.cyan}; text-decoration: none; cursor: pointer">cjberragan@gmail.com</a>`,
    ],
    cal: generateCalendar(),
    clear: ['CLEAR'],
    neofetch: [
      `<pre style="color: ${theme.cyan}; line-height: 1.2">       /\\
      /  \\
     /\\   \\
<span style="color: ${theme.blue}">    /      \\
   /   ,,   \\
  /   |  |  -\\
 /_-''    ''-_\\</span></pre>`,
      `<span style="color: ${theme.purple}">cjber</span>@<span style="color: ${theme.purple}">dev</span>`,
      `<span style="color: ${theme.blue}">os</span>       Arch Linux`,
      `<span style="color: ${theme.blue}">shell</span>    bash`,
      `<span style="color: ${theme.blue}">terminal</span> web`,
      `<span style="color: ${theme.blue}">location</span> Glasgow, Scotland`,
      `<span style="color: ${theme.blue}">role</span>     Software Engineer @ thirdweb`,
    ],
    pfetch: [
      `<pre style="color: ${theme.cyan}; line-height: 1.2">       /\\
      /  \\
     /\\   \\
<span style="color: ${theme.blue}">    /      \\
   /   ,,   \\
  /   |  |  -\\
 /_-''    ''-_\\</span></pre>`,
      `<span style="color: ${theme.purple}">cjber</span>@<span style="color: ${theme.purple}">dev</span>`,
      `<span style="color: ${theme.blue}">os</span>       Arch Linux`,
      `<span style="color: ${theme.blue}">shell</span>    bash`,
      `<span style="color: ${theme.blue}">terminal</span> web`,
      `<span style="color: ${theme.blue}">location</span> Glasgow, Scotland`,
      `<span style="color: ${theme.blue}">role</span>     Software Engineer @ thirdweb`,
    ],
    matrix: ['MATRIX'],
  }

  const handleKeyDown = (e: React.KeyboardEvent<HTMLInputElement>) => {
    if (e.key === 'Enter') {
      e.preventDefault()
      const trimmedInput = currentInput.trim()
      
      // Add to command history if not empty
      if (trimmedInput) {
        setCommandHistory(prev => [...prev, trimmedInput])
        setHistoryIndex(-1)
      }
      
      const commandLine = `<span style="color: ${theme.purple}">cjber@dev</span>:<span style="color: ${theme.blue}">~</span>$ <span style="color: ${theme.yellow}">${trimmedInput}</span>`
      
      if (trimmedInput === 'clear') {
        setHistory([])
      } else if (trimmedInput === 'matrix') {
        setHistory([...history, commandLine, 'Initializing Matrix rain...', ''])
        setTimeout(() => setShowMatrix(true), 500)
      } else if (trimmedInput.startsWith('cal')) {
        const parts = trimmedInput.split(' ').filter(p => p)
        let calendarOutput: string[]
        
        if (parts.length === 1) {
          // cal - current month
          calendarOutput = generateCalendar()
        } else if (parts.length === 2) {
          // cal YYYY - specific year, current month
          const year = parseInt(parts[1])
          if (isNaN(year) || year < 1 || year > 9999) {
            calendarOutput = [`<span style="color: ${theme.red}">cal: invalid year '${parts[1]}'</span>`]
          } else {
            calendarOutput = generateCalendar(year, new Date().getMonth())
          }
        } else if (parts.length === 3) {
          // cal MM YYYY - specific month and year
          const month = parseInt(parts[1]) - 1 // Convert to 0-indexed
          const year = parseInt(parts[2])
          
          if (isNaN(month) || month < 0 || month > 11) {
            calendarOutput = [`<span style="color: ${theme.red}">cal: invalid month '${parts[1]}'</span>`]
          } else if (isNaN(year) || year < 1 || year > 9999) {
            calendarOutput = [`<span style="color: ${theme.red}">cal: invalid year '${parts[2]}'</span>`]
          } else {
            calendarOutput = generateCalendar(year, month)
          }
        } else {
          calendarOutput = [`<span style="color: ${theme.red}">Usage: cal [month] [year]</span>`]
        }
        
        setHistory([...history, commandLine, ...calendarOutput, ''])
      } else if (trimmedInput.startsWith('theme')) {
        const parts = trimmedInput.split(' ')
        if (parts.length === 2 && themes[parts[1]]) {
          setCurrentTheme(parts[1])
          setHistory([...history, commandLine, `Theme changed to ${parts[1]}`, ''])
        } else if (parts.length === 1) {
          setHistory([...history, commandLine, `Current theme: ${currentTheme}`, 'Available themes: orange, dark, light', 'Usage: theme <name>', ''])
        } else {
          setHistory([...history, commandLine, `<span style="color: ${theme.red}">Invalid theme. Available: orange, dark, light</span>`, ''])
        }
      } else if (commands[trimmedInput]) {
        setHistory([...history, commandLine, ...commands[trimmedInput], ''])
      } else if (trimmedInput) {
        setHistory([...history, commandLine, `<span style="color: ${theme.red}">bash: ${trimmedInput}: command not found</span>`, ''])
      } else {
        setHistory([...history, commandLine, ''])
      }
      
      setCurrentInput('')
    } else if (e.key === 'ArrowUp') {
      e.preventDefault()
      if (commandHistory.length > 0) {
        const newIndex = historyIndex < commandHistory.length - 1 ? historyIndex + 1 : historyIndex
        setHistoryIndex(newIndex)
        setCurrentInput(commandHistory[commandHistory.length - 1 - newIndex])
      }
    } else if (e.key === 'ArrowDown') {
      e.preventDefault()
      if (historyIndex > 0) {
        const newIndex = historyIndex - 1
        setHistoryIndex(newIndex)
        setCurrentInput(commandHistory[commandHistory.length - 1 - newIndex])
      } else if (historyIndex === 0) {
        setHistoryIndex(-1)
        setCurrentInput('')
      }
    } else if (e.key === 'Tab') {
      e.preventDefault()
      // Tab completion
      let availableCommands = [...Object.keys(commands), 'theme', 'matrix']
      
      // Add theme subcommands
      if (currentInput.startsWith('theme ')) {
        const themeArg = currentInput.substring(6)
        const themeOptions = ['orange', 'dark', 'light']
        const themeMatches = themeOptions.filter(t => t.startsWith(themeArg))
        if (themeMatches.length === 1) {
          setCurrentInput(`theme ${themeMatches[0]}`)
        } else if (themeMatches.length > 1) {
          const commandLine = `<span style="color: ${theme.purple}">cjber@dev</span>:<span style="color: ${theme.blue}">~</span>$ <span style="color: ${theme.yellow}">${currentInput}</span>`
          setHistory([...history, commandLine, themeMatches.join('  '), ''])
        }
      } else {
        const matches = availableCommands.filter(cmd => cmd.startsWith(currentInput))
        if (matches.length === 1) {
          setCurrentInput(matches[0])
        } else if (matches.length > 1) {
          // Show available completions
          const commandLine = `<span style="color: ${theme.purple}">cjber@dev</span>:<span style="color: ${theme.blue}">~</span>$ <span style="color: ${theme.yellow}">${currentInput}</span>`
          setHistory([...history, commandLine, matches.join('  '), ''])
        }
      }
    }
  }

  const handleClick = () => {
    inputRef.current?.focus()
  }

  // Matrix rain effect component
  const MatrixRain = () => {
    const canvasRef = useRef<HTMLCanvasElement>(null)
    
    useEffect(() => {
      const canvas = canvasRef.current
      if (!canvas) return
      
      const ctx = canvas.getContext('2d')
      if (!ctx) return
      
      canvas.width = window.innerWidth
      canvas.height = window.innerHeight
      
      const matrix = 'ABCDEFGHIJKLMNOPQRSTUVWXYZ123456789@#$%^&*()*&^%+-/~{[|`]}'.split('')
      const fontSize = 14
      const columns = canvas.width / fontSize
      const drops: number[] = []
      
      // Initialize drops with varied starting positions for seamless effect
      for (let x = 0; x < columns; x++) {
        drops[x] = Math.floor(Math.random() * -canvas.height/fontSize)
      }
      
      const draw = () => {
        ctx.fillStyle = 'rgba(0, 0, 0, 0.05)'
        ctx.fillRect(0, 0, canvas.width, canvas.height)
        
        ctx.fillStyle = '#0F0'
        ctx.font = fontSize + 'px monospace'
        
        for (let i = 0; i < drops.length; i++) {
          const text = matrix[Math.floor(Math.random() * matrix.length)]
          ctx.fillText(text, i * fontSize, drops[i] * fontSize)
          
          // Reset at the top when reaching bottom, creating seamless loop
          if (drops[i] * fontSize > canvas.height) {
            drops[i] = -1
          }
          drops[i]++
        }
      }
      
      const interval = setInterval(draw, 50)
      
      const handleKeyDown = (e: KeyboardEvent) => {
        if (e.key === 'Escape' || (e.ctrlKey && e.key === 'c')) {
          setShowMatrix(false)
        }
      }
      
      const handleResize = () => {
        canvas.width = window.innerWidth
        canvas.height = window.innerHeight
      }
      
      window.addEventListener('keydown', handleKeyDown)
      window.addEventListener('resize', handleResize)
      
      return () => {
        clearInterval(interval)
        window.removeEventListener('keydown', handleKeyDown)
        window.removeEventListener('resize', handleResize)
      }
    }, [])
    
    return (
      <div 
        style={{
          position: 'fixed',
          top: 0,
          left: 0,
          width: '100vw',
          height: '100vh',
          zIndex: 9999,
          backgroundColor: 'black',
        }}
      >
        <canvas ref={canvasRef} style={{ display: 'block' }} />
        <div 
          style={{
            position: 'absolute',
            bottom: '20px',
            left: '50%',
            transform: 'translateX(-50%)',
            color: '#0F0',
            fontFamily: 'monospace',
            fontSize: '14px',
            textAlign: 'center',
            animation: 'blink 1s infinite',
          }}
        >
          Press ESC or Ctrl+C to exit
        </div>
      </div>
    )
  }

  return (
    <main 
      className="min-h-screen font-mono" 
      style={{ 
        backgroundColor: theme.bg, 
        color: theme.fg,
        padding: '20px',
        fontSize: fontSize,
        lineHeight: lineHeight,
        transition: 'background-color 0.3s, color 0.3s',
      }}
    >
      <div className="max-w-4xl mx-auto">
        <div 
          ref={terminalRef}
          className="rounded-lg border cursor-text transition-all overflow-y-auto terminal-scroll"
          style={{ 
            borderColor: currentTheme === 'light' ? 'oklch(0.9276 0.0058 264.5313)' : 'oklch(0.2520 0 0)',
            backgroundColor: currentTheme === 'light' ? 'oklch(1.0000 0 0)' : 'oklch(0.1822 0 0)',
            padding: '24px',
            boxShadow: '0px 1px 4px 0px hsl(0 0% 0% / 0.05), 0px 2px 4px -1px hsl(0 0% 0% / 0.05)',
            height: '600px',
            scrollBehavior: 'smooth',
          }}
          onClick={handleClick}
        >
        <div style={{ color: theme.muted, marginBottom: '0.5em' }}>
          Last login: {loginTime}
        </div>
        <div style={{ marginBottom: '0.5em' }}></div>
        
        {initialOutput.map((line, i) => (
          <div 
            key={`initial-${i}`}
            dangerouslySetInnerHTML={{ __html: line || '&nbsp;' }}
            style={{ minHeight: '1.5em' }}
          />
        ))}
        
        {history.map((line, i) => (
          <div 
            key={`history-${i}`}
            dangerouslySetInnerHTML={{ __html: line || '&nbsp;' }}
            style={{ minHeight: '1.5em' }}
          />
        ))}
        
        <div className="flex" style={{ position: 'relative', minHeight: '1.5em' }}>
          <span dangerouslySetInnerHTML={{ __html: `<span style="color: ${colors.purple}">cjber@dev</span>:<span style="color: ${colors.blue}">~</span>$&nbsp;` }} />
          <div className="flex-1" style={{ position: 'relative' }}>
            <input
              ref={inputRef}
              type="text"
              value={currentInput}
              onChange={(e) => {
                setCurrentInput(e.target.value)
                setCursorPosition(e.target.selectionStart || 0)
              }}
              onKeyDown={handleKeyDown}
              onKeyUp={(e) => setCursorPosition(e.currentTarget.selectionStart || 0)}
              onClick={(e) => setCursorPosition(e.currentTarget.selectionStart || 0)}
              style={{ 
                color: colors.yellow,
                background: 'transparent',
                border: 'none',
                outline: 'none',
                width: '100%',
                font: 'inherit',
                fontSize: fontSize,
                lineHeight: lineHeight,
                padding: 0,
                margin: 0,
                caretColor: 'transparent',  // Hide native cursor
              }}
              spellCheck={false}
              autoComplete="off"
            />
            <span 
              className="cursor-blink"
              style={{
                position: 'absolute',
                left: `${currentInput.length * 9.5}px`,
                top: '50%',
                transform: 'translateY(-50%)',
                backgroundColor: theme.fg,
                width: '10px',
                height: '20px',
                display: 'inline-block',
              }}
            />
          </div>
        </div>
        </div>
      </div>
      {showMatrix && <MatrixRain />}
    </main>
  )
}